Epitech Paris                           Pierre-Alexandre Delgado-Arevalo
October 2022                                               Vincent Zhong
Category: Standards Track                                    Sandro Sgro
                                                         Titouan Lefevre

                          R-Type UDP Protocol

Table of Contents

    1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . . 1

    2.  Header . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
        2a. Format Header  . . . . . . . . . . . . . . . . . . . . . . 1
        2b. General data transmission  . . . . . . . . . . . . . . . . 1

    3.  Actions from client  . . . . . . . . . . . . . . . . . . . . . 2

    4.  Event from server  . . . . . . . . . . . . . . . . . . . . . . 3

1. Introduction

    This UDP Protocol is one of the 2 Protocols done for the R-Type
    project (third year Epitech's project). It specify the events of
    the client-server communications in game.

    When the game is start, the communication is done by the UDP protocol

    The UDP protocol is a good protocol in video games, because we can send
    data without knowing who receive it and if they receive it,
    But sometimes it can lose data and create lags.

2. Header

    2a. Format Header

        Header is compose of :
            CODE: unsigned int
            MESSAGE_SIZE: unsigned int

    2b. General data transmission

        The client-server send 3 types of data structures:
        Structure ID :
            std::size_t id

        Structure EntityTransfer (all data about an element: texture, position, move x...) :
            std::size_t id;
            // Texture component
            std::size_t textureID;
            // Position component
            float pos_x;
            float pos_y;
            // Rectangle component
            float rect_x;
            float rect_y;
            float width;
            float height;
            //Frame Speed
            float frame_speed_x;
            float frame_speed_y;
            // Rectangle start point 
            float start_point_x;
            float start_point_y;
            float framemax;
            // Direction component
            float direction_x;
            float direction_y;
            float direction_x_decimal_part; // rounded to 4 after comma
            float direction_y_decimal_part; // rounded to 4 after comma
            bool neg_direction_x;
            bool neg_direction_y;
            // Faction component
            unsigned int faction;

        Structure PlayerMove (data about the player movement) :
            std::size_t id;
            float moveX;
            float moveX_decimal_part;
            bool negX;
            float moveY;
            float moveY_decimal_part;
            bool negY;



Sgro                        Standards Track                     [Page 1]

RFC 9999                    R-Type Protocols                October 2022

3. actions from client

    once the server is start, and the server have all it data,
    he will start all of it calculs and accept all of these actions from the client:
        CONNECTION,
        SEND_MISSILE,
        SEND_MOVEMENT

    The CONNECTION action:
        When the client connect to the server,
        he just say it to the server by sending it id (structure ID).
        The server send the new ID to the client (structure ID).
        and one message for all entities in the game (structure EntityTransfer)

    The SEND_MISSILE action:
        During the game, the player can shoot.
        Once a shoot is done on the client side.
        A message is send to the server, with the id of the client (structure ID).
        The server send a message to all client with the new entity (missile) created.

    The SEND_MOVEMENT action:
        When the player move, the player send to the server the structure PlayerMove.
        if the movement can be done, the server send a message to all clients, with the structure PlayerMove
        else no messages are send.

4. event from server

    during the game, the server can send event to all client, even if they ask nothing:
        DEATH_ENTITY,
        ENTITY_BAD_PLACE
        COLLISION_BETWEEN_ENTITY,
        END_GAME

    The DEATH_ENTITY event:
        when an entity die, the server send it id to all clients (structure ID)

    The ENTITY_BAD_PLACE event:
        when an entity move to a bad place, the server send the the structure EntityTransfer with new good direction_x_decimal_part
    
    COLLISION_BETWEEN_ENTITY:
        The server send 2 messages when there is a collison, one for each entities in the collison.
        The data send are in EntityTransfer.

    The END_GAME event:
        the game is over, no data transfer.
